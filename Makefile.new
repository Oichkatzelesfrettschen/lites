# Prefer the modernised source tree if present
ifeq ($(wildcard src-lites-1.1-2025),src-lites-1.1-2025)
SRCDIR ?= src-lites-1.1-2025
else
SRCDIR ?= build/lites-1.1.u3
endif
CC ?= gcc

# Optional Mach kernel source tree for headers
MACHDIR ?= $(LITES_MACH_DIR)
ifeq ($(MACHDIR),)
ifneq ($(wildcard openmach/include),)
MACHDIR := openmach
endif
endif

ifeq ($(MACHDIR),)
ifneq ($(wildcard localmach/include),)
MACH_INCDIR := -Ilocalmach/include
else
$(error Mach headers not found. Set LITES_MACH_DIR or add the openmach submodule or run scripts/extract-xmach-headers.sh)
endif
else
MACH_INCDIR := -I$(MACHDIR)/include
endif
MACHLIBDIR ?= $(LITES_MACH_LIB_DIR)
ifeq ($(MACHLIBDIR),)
ifneq ($(MACHDIR),)
ifneq ($(wildcard $(MACHDIR)/lib),)
MACHLIBDIR := $(MACHDIR)/lib
endif
endif
endif
ifneq ($(MACHLIBDIR),)
MACH_LIBS := $(wildcard $(MACHLIBDIR)/*.a)
endif

# Target architecture (x86_64 or i686). Determines -m32/-m64 flags.
ARCH ?= x86_64

# Base optimisation flags
C23_FLAG := $(shell $(CC) -std=c23 -E -x c /dev/null >/dev/null 2>&1 && echo -std=c23 || echo -std=c2x)
CFLAGS ?= -O2 $(C23_FLAG)

# Optional address sanitizer
SANITIZE ?= 0
ifeq ($(SANITIZE),1)
CFLAGS += -fsanitize=address
LDFLAGS += -fsanitize=address
endif

# Multicore scheduler support
MULTICORE_SCHED ?= 0
ifeq ($(MULTICORE_SCHED),1)
CFLAGS += -DCONFIG_SCHED_MULTICORE=1
else
CFLAGS += -DCONFIG_SCHED_MULTICORE=0
endif


# Translate ARCH into compiler options and per-architecture includes
ifeq ($(ARCH),i686)
CFLAGS += -m32
LDFLAGS += -m32
ARCH_INCDIR := -I$(SRCDIR)/include/i386
else ifeq ($(ARCH),x86_64)
CFLAGS += -m64
LDFLAGS += -m64
ARCH_INCDIR := -I$(SRCDIR)/include/x86_64
else ifeq ($(ARCH),arm)
CFLAGS += -marm
ARCH_INCDIR := -I$(SRCDIR)/include/arm
else ifeq ($(ARCH),riscv64)
CFLAGS += -march=rv64imac -mabi=lp64
ARCH_INCDIR := -I$(SRCDIR)/include/riscv64
else ifeq ($(ARCH),powerpc)
CFLAGS += -m32
LDFLAGS += -m32
ARCH_INCDIR := -I$(SRCDIR)/include/powerpc
else ifeq ($(ARCH),ia16)
CFLAGS += -m16
LDFLAGS += -m16
ARCH_INCDIR := -I$(SRCDIR)/include/ia16
endif

# Map ARCH to the corresponding directory name
ARCH_DIR := $(ARCH)
ifeq ($(ARCH),i686)
ARCH_DIR := i386
else ifeq ($(ARCH),ia16)
ARCH_DIR := ia16
endif

# Directories under server that are architecture independent
SERVER_COMMON_DIRS := \
  $(SRCDIR)/server/kern \
  $(SRCDIR)/server/miscfs \
  $(SRCDIR)/server/vm \
  $(SRCDIR)/server/netiso \
  $(SRCDIR)/server/serv \
  $(SRCDIR)/server/netinet \
  $(SRCDIR)/server/ufs \
  $(SRCDIR)/server/nfs \
  $(SRCDIR)/server/netccitt \
  $(SRCDIR)/server/net \
  $(SRCDIR)/server/netns

# Source files and include directories for the selected architecture
SERVER_DIRS := $(SRCDIR)/server/$(ARCH_DIR) $(SERVER_COMMON_DIRS)
SERVER_SRC := $(foreach d,$(SERVER_DIRS),$(shell find $(d) -name \*.c -o -name \*.S))
SERVER_INCDIRS := $(addprefix -I,$(SERVER_DIRS))
KERN_SRC := $(wildcard kern/*.c) kern/runqueue.c $(wildcard $(SRCDIR)/iommu/*.c)
KERN_INCDIRS := -Ikern -I$(SRCDIR)/iommu


ifneq ($(wildcard $(SRCDIR)/emulator),)
EMULATOR_SRC := $(shell find $(SRCDIR)/emulator -name '*.c' -o -name '*.S')
EMULATOR_INCDIRS := -I$(SRCDIR)/emulator
endif

TARGETS := lites_server
ifneq ($(EMULATOR_SRC),)
TARGETS += lites_emulator
endif

TEST_SUBDIRS := $(sort $(dir $(wildcard tests/*/Makefile)))

all: prepare $(TARGETS)

prepare:
        @if [ ! -e $(SRCDIR)/include/machine ]; then \
          arch_dir=$(ARCH); \
          [ "$$arch_dir" = "i686" ] && arch_dir=i386; \
          ln -s $$arch_dir $(SRCDIR)/include/machine; \
        fi

lites_server: $(SERVER_SRC) $(KERN_SRC)
	$(CC) $(CFLAGS) -I$(SRCDIR)/include $(ARCH_INCDIR) $(MACH_INCDIR) $(SERVER_INCDIRS) $(KERN_INCDIRS) $^ $(MACH_LIBS) $(LDFLAGS) -o $@

ifneq ($(EMULATOR_SRC),)
lites_emulator: $(EMULATOR_SRC) $(KERN_SRC)
	$(CC) $(CFLAGS) -I$(SRCDIR)/include $(ARCH_INCDIR) $(MACH_INCDIR) $(EMULATOR_INCDIRS) $(KERN_INCDIRS) $^ $(MACH_LIBS) $(LDFLAGS) -o $@
endif

clean:
	rm -f lites_server lites_emulator

test: all
	@for d in $(TEST_SUBDIRS); do \
	$(MAKE) -C $$d; \
	done

.PHONY: all prepare clean test

